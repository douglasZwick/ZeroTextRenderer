///////////////////////////////////////////////////////////////////////////////
///           |
/// AUTHORS   | Nate Carlson, modifications by Doug Zwick
/// COPYRIGHT | (C) 2017 DigiPen Institute of Technology
///           |
///////////////////////////////////////////////////////////////////////////////

enum RenderTargetType { FinalTarget, SceneBuffer, }

// Renders geometric and material data of opaque objects and defers lighting for a separate pass.
// Allow processing of an arbitrary number of dynamic area lights with minimal performance penalty.
[RunInEditor]
class ScheduledDeferredRenderer : ZilchComponent
{
  [Dependency] var RenderScheduler : RenderScheduler;
  
  
  // Outputs values from the geometry pass for debugging.
  [Property] var GeometryDebug : GeometryValue = GeometryValue.None;
  // If DebugDraw RenderGroups are drawn in edit mode.
  [Property] var EditorDebugDraw : Boolean = true;
  // If DebugDraw RenderGroups are drawn in play mode.
  [Property] var GameDebugDraw : Boolean = true;
  // Toggles diffuse light output.
  [Property] var RenderDiffuse : Boolean = true;
  // Toggles specular light output.
  [Property] var RenderSpecular : Boolean = true;
  // If skybox should be used for the background, uses ClearColor for background if false.
  [Property] var RenderSkybox : Boolean = true;
  // Cubemap Texture to use for indirect lighting and/or scene background. Undefined behavior if null or not a cubemap.
  [Property] var Skybox : Texture = Texture.SimpleSkybox;
  // Color for the background if not using the skybox.
  [Property] var ClearColor : Real4 = Real4(0.0, 0.0, 0.0, 1.0);
  // Toggles output of dynamic area lights.
  [Property] var DirectLighting : Boolean = true;
  // Toggles output of the image-based lighting pass that uses the skybox.
  [Property] var IndirectLighting : Boolean = true;
  // Arbitrary scalar for the output of IndirectLighting.
  [Property] var IndirectIntensity : Real = 1.0;
  // If a filmic tonemap should be used when converting lighting results from linear to gamma for monitor display.
  [Property] var ToneMap : Boolean = true;
  
  [Property] var RenderTo : RenderTargetType = RenderTargetType.FinalTarget;
  
  
  //***************************************************************************
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Owner, Events.MainRenderUpdate, this.OnMainRenderUpdate);
    Zero.Connect(this.Owner, Events.DebugRenderUpdate, this.OnDebugRenderUpdate);
  }
  
  
  //***************************************************************************
  function OnMainRenderUpdate(event : RenderScheduleEvent)
  {
    if (this.Space.IsEditorMode)
      if (Zero.Keyboard.KeyIsPressed(Keys.B) && Zero.Keyboard.KeyIsDown(Keys.Control))
        this.RenderSkybox = !this.RenderSkybox;
    
    var viewportSize = event.ViewportSize;
    var final = event.FinalTarget;
    if (this.RenderTo == RenderTargetType.SceneBuffer)
      final = event.SceneBuffer;
    
    // Geometry pass
    var geometryBuffer0 = event.GeoTarget0;
    var geometryBuffer1 = event.GeoTarget1;
    var depthStencil = event.DepthStencil;
    
    var geometryPassSettings = RenderSettings();
    geometryPassSettings.MultiRenderTarget.ColorTarget0 = geometryBuffer0;
    geometryPassSettings.MultiRenderTarget.ColorTarget1 = geometryBuffer1;
    geometryPassSettings.DepthTarget = depthStencil;
    
    geometryPassSettings.DepthSettings.DepthMode = DepthMode.Write;
    geometryPassSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    // Using stencil buffer to optimally identify which pixels had opaque objects rendered to them
    geometryPassSettings.DepthSettings.StencilMode = StencilMode.Enabled;
    geometryPassSettings.DepthSettings.StencilCompareFunc = TextureCompareFunc.Always;
    geometryPassSettings.DepthSettings.StencilFailOp = StencilOp.Keep;
    geometryPassSettings.DepthSettings.DepthFailOp = StencilOp.Keep;
    geometryPassSettings.DepthSettings.DepthPassOp = StencilOp.Replace;
    geometryPassSettings.DepthSettings.StencilTestValue = 1 as Byte;
    
    // Clearing depth to 1 (the farplane) the way it is currently stored, and normals to +z
    event.Event.AddRenderTaskClearTarget(geometryPassSettings, Real4(0.0, 0.0, 1.0, 1.0), 1.0, 0);
    
    geometryPassSettings.CullMode = CullMode.BackFace;
    event.Event.AddRenderTaskRenderPass(geometryPassSettings, RenderGroup.Opaque, GeometryPass());
    
    geometryPassSettings.CullMode = CullMode.Disabled;
    event.Event.AddRenderTaskRenderPass(geometryPassSettings, RenderGroup.OpaqueDoubleSided, GeometryPass());
    
    // Lighting
    var lightBuffer = event.Event.GetRenderTarget(viewportSize, TextureFormat.RGBA16f);
    event.Event.AddRenderTaskClearTarget(lightBuffer, Real4(0.0, 0.0, 0.0, 1.0));
    
    var lightSettings = RenderSettings();
    lightSettings.ColorTarget = lightBuffer;
    lightSettings.DepthTarget = depthStencil;
    
    // Only process background pixels
    lightSettings.DepthSettings.StencilMode = StencilMode.Enabled;
    lightSettings.DepthSettings.StencilCompareFunc = TextureCompareFunc.Equal;
    lightSettings.DepthSettings.StencilFailOp = StencilOp.Keep;
    lightSettings.DepthSettings.DepthFailOp = StencilOp.Keep;
    lightSettings.DepthSettings.DepthPassOp = StencilOp.Keep;
    lightSettings.DepthSettings.StencilTestValue = 0 as Byte;
    
    if (this.RenderSkybox && this.Skybox != null && this.Skybox.Type == TextureType.TextureCube)
    {
      var skybox = Skybox();
      skybox.Skybox = this.Skybox;
    
      event.Event.AddRenderTaskPostProcess(lightSettings, skybox);
    }
    else
    {
      var copyValue = CopyValue();
      copyValue.Color = Math.Pow(this.ClearColor, Real4(2.2.XXX, 1.0));
      event.Event.AddRenderTaskPostProcess(lightSettings, copyValue);
    }
    
    // Only process opaque pixels
    lightSettings.DepthSettings.StencilTestValue = 1 as Byte;
    
    if (this.GeometryDebug != GeometryValue.None)
    {
      // Bring skybox to gamma space for monitor display
      this.LinearToGamma(event.Event, lightBuffer, final);
      
      var geometryDebug = GeometryDebug();
      geometryDebug.GeometryBuffer0 = geometryBuffer0.Texture;
      geometryDebug.GeometryBuffer1 = geometryBuffer1.Texture;
      
      if (this.GeometryDebug == GeometryValue.Normal)
        geometryDebug.ShowNormal = true;
      else if (this.GeometryDebug == GeometryValue.Depth)
        geometryDebug.ShowDepth = true;
      else if (this.GeometryDebug == GeometryValue.Roughness)
        geometryDebug.ShowRoughness = true;
      else if (this.GeometryDebug == GeometryValue.Albedo)
        geometryDebug.ShowAlbedo = true;
      else if (this.GeometryDebug == GeometryValue.Metallic)
        geometryDebug.ShowMetallic = true;
      else if (this.GeometryDebug == GeometryValue.Specular)
        geometryDebug.ShowSpecular = true;
      
      var geometryDebugSettings = RenderSettings();
      geometryDebugSettings.ColorTarget = final;
      geometryDebugSettings.DepthTarget = depthStencil;
      geometryDebugSettings.DepthSettings = lightSettings.DepthSettings;
      
      event.Event.AddRenderTaskPostProcess(geometryDebugSettings, geometryDebug);
      
      //this.DrawDebugObjects(event.Event, final, depthStencil);
        
      return;
    }
      
    if (this.IndirectLighting)
    {
      var imageBasedLighting = ImageBasedLighting();
      imageBasedLighting.DitherTexture = Texture.BlueNoise;
      imageBasedLighting.EnvironmentBrdfLut = Texture.EnvironmentBrdfLut;
      imageBasedLighting.Skybox = this.Skybox;
      imageBasedLighting.Intensity = this.IndirectIntensity;
      imageBasedLighting.GeometryBuffer0 = geometryBuffer0.Texture;
      imageBasedLighting.GeometryBuffer1 = geometryBuffer1.Texture;
      imageBasedLighting.RenderDiffuse = this.RenderDiffuse;
      imageBasedLighting.RenderSpecular = this.RenderSpecular;
    
      event.Event.AddRenderTaskPostProcess(lightSettings, imageBasedLighting);
    }
    
    // Ssao
    if (this.Owner.Ssao != null)
    {
      this.Owner.Ssao.AddRenderTasks(event.Event, lightBuffer, geometryBuffer0);
      if (this.Owner.Ssao.DebugBuffer && this.Owner.Ssao.Active)
      {
        // Don't do any other lighting if debugging ssao buffer
        this.LinearToGamma(event.Event, lightBuffer, final);
        //this.DrawDebugObjects(event.Event, final, depthStencil);
        return;
      }
    }
    
    if (this.DirectLighting)
    {
      var geometryInputs = ShaderInputs();
      geometryInputs.Add("GeometryInput", "GeometryBuffer0", geometryBuffer0.Texture);
      geometryInputs.Add("GeometryInput", "GeometryBuffer1", geometryBuffer1.Texture);
      
      lightSettings.GlobalShaderInputs = geometryInputs;
      lightSettings.CullMode = CullMode.FrontFace;
      lightSettings.BlendSettings.BlendMode = BlendMode.Enabled;
      lightSettings.BlendSettings.BlendEquation = BlendEquation.Add;
      lightSettings.BlendSettings.SourceFactor = BlendFactor.One;
      lightSettings.BlendSettings.DestFactor = BlendFactor.One;
      lightSettings.DepthSettings.DepthMode = DepthMode.Read;
      lightSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.GreaterEqual;
      
      var lightPass = LightPass();
      lightPass.DitherTexture = Texture.BlueNoise;
      lightPass.RenderDiffuse = this.RenderDiffuse;
      lightPass.RenderSpecular = this.RenderSpecular;
      
      event.Event.AddRenderTaskRenderPass(lightSettings, RenderGroup.Lights, lightPass);
    }
    
    //// x-ray stuff
    //event.Event.AddRenderTaskClearTarget(event.XrayBuffer, Real4(0));
    //var xraySettings = RenderSettings();
    //xraySettings.ColorTarget = event.XrayBuffer;
    //xraySettings.DepthTarget = depthStencil;
    //xraySettings.CullMode = CullMode.BackFace;
    //xraySettings.BlendSettings.BlendMode = BlendMode.Enabled;
    //xraySettings.BlendSettings.BlendEquation = BlendEquation.Add;
    //xraySettings.BlendSettings.BlendEquationAlpha = BlendEquation.Add;
    //xraySettings.BlendSettings.SourceFactor = BlendFactor.One;
    //xraySettings.BlendSettings.DestFactor = BlendFactor.One;
    //xraySettings.DepthSettings.DepthMode = DepthMode.Read;
    //xraySettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.Greater;
    //event.Event.AddRenderTaskRenderPass(xraySettings, RenderGroup.Xray, XrayRenderPass());
    
    // Additive materials
    var alphaSettings = RenderSettings();
    alphaSettings.ColorTarget = lightBuffer;
    alphaSettings.DepthTarget = depthStencil;
    alphaSettings.CullMode = CullMode.Disabled;
    alphaSettings.BlendSettings.BlendMode = BlendMode.Separate;
    alphaSettings.BlendSettings.BlendEquation = BlendEquation.Add;
    alphaSettings.BlendSettings.SourceFactor = BlendFactor.SourceAlpha;
    alphaSettings.BlendSettings.DestFactor = BlendFactor.One;
    alphaSettings.BlendSettings.SourceFactorAlpha = BlendFactor.One;
    alphaSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
    alphaSettings.DepthSettings.DepthMode = DepthMode.Read;
    alphaSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    event.Event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.AdditiveBlend, ColorOutput());
    
    // Bloom
    if (this.Owner.Bloom != null)
      this.Owner.Bloom.AddRenderTasks(event.Event, lightBuffer);
    
    // Bring final lighting to gamma space for monitor display
    this.LinearToGamma(event.Event, lightBuffer, final);
    
    // Alpha materials
    alphaSettings.ColorTarget = final;
    alphaSettings.BlendSettings.DestFactor = BlendFactor.InvSourceAlpha;
    //alphaSettings.CullMode = CullMode.BackFace;
    //event.Event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.PreAlphaBlend, ColorOutput());
    event.Event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.AlphaBlend, ColorOutput());
    //event.Event.AddRenderTaskRenderPass(alphaSettings, RenderGroup.PostAlphaBlend, ColorOutput());
    
    //this.DrawDebugObjects(event.Event, final, depthStencil);
  }
  
  
  //***************************************************************************
  function LinearToGamma(event : RenderTasksEvent, inputBuffer : RenderTarget, outputBuffer : RenderTarget)
  {
    if (this.ToneMap)
    {
      var filmicToneMap = FilmicTonemap();
      filmicToneMap.Texture = inputBuffer.Texture;
      event.AddRenderTaskPostProcess(outputBuffer, filmicToneMap);
    }
    else
    {
      var toGamma = ToGamma();
      toGamma.Texture = inputBuffer.Texture;
      event.AddRenderTaskPostProcess(outputBuffer, toGamma);
    }
  }
  
  
  //***************************************************************************
  function OnDebugRenderUpdate(event : RenderScheduleEvent)
  {
    var viewportSize = event.ViewportSize;
    var final = event.FinalTarget;
    if (this.RenderTo == RenderTargetType.SceneBuffer)
      final = event.SceneBuffer;
    var depthStencil = event.DepthStencil;
    
    this.DrawDebugObjects(event.Event, final, depthStencil);
  }
  
  
  //***************************************************************************
  function DrawDebugObjects(event : RenderTasksEvent, color : RenderTarget, depth : RenderTarget)
  {
    if (!this.EditorDebugDraw && this.Space.IsEditorMode || !this.GameDebugDraw && !this.Space.IsEditorMode)
      return;
    
    var debugSettings = RenderSettings();
    debugSettings.ColorTarget = color;
    debugSettings.DepthTarget = depth;
    
    debugSettings.CullMode = CullMode.Disabled;
    
    debugSettings.BlendSettings.BlendMode = BlendMode.Separate;
    debugSettings.BlendSettings.BlendEquation = BlendEquation.Add;
    debugSettings.BlendSettings.SourceFactor = BlendFactor.SourceAlpha;
    debugSettings.BlendSettings.DestFactor = BlendFactor.InvSourceAlpha;
    debugSettings.BlendSettings.SourceFactorAlpha = BlendFactor.One;
    debugSettings.BlendSettings.DestFactorAlpha = BlendFactor.One;
    
    debugSettings.DepthSettings.DepthMode = DepthMode.Read;
    debugSettings.DepthSettings.DepthCompareFunc = TextureCompareFunc.LessEqual;
    
    event.AddRenderTaskRenderPass(debugSettings, RenderGroup.DebugDraw, ColorOutput());
    
    debugSettings.DepthSettings.DepthMode = DepthMode.Disabled;
    event.AddRenderTaskRenderPass(debugSettings, RenderGroup.DebugDrawOnTop, ColorOutput());
  }
}
